defmodule GodwokenRPC.UtilTest do
  use GodwokenExplorer.DataCase

  alias GodwokenRPC.Util

  describe "parse_polyjuice_args" do
    test "when is native transfer" do
      result =
        Util.parse_polyjuice_args(
          "ffffff504f4c590068bf00000000000000a007c2da51000000000000000000000000e867ce97461d310000000000000000000000715ab282b873b79a7be8b0e8c13c4e8966a52040"
        )

      assert result == [
               false,
               49000,
               90_000_000_000_000,
               906_000_000_000_000_000_000,
               0,
               "0x",
               "0x715ab282b873b79a7be8b0e8c13c4e8966a52040"
             ]
    end

    test "when is other polyjuice args" do
      result =
        Util.parse_polyjuice_args(
          "ffffff504f4c590000c076000000000001e40b540200000000000000000000000002000000000000000000000000000000000000"
        )

      assert result == [false, 7_782_400, 10_000_000_001, 512, 0, "0x", nil]
    end
  end

  test "parse gas less tx" do
    data =
      "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000001005c8b8ee7a873576f5a6a9862c0c14909e01c100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000444dd3b30b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000168d8f646cfffa073c207eb8f83d62cb3d842ade4e123400000000000000000000"

    {call_contract, call_data, call_gas_limit, verification_gas_limit, max_fee_per_gas,
     max_priority_fee_per_gas, paymaster_and_data} = Util.parse_gas_less_data(data)

    assert "0x" <> (call_contract |> Base.encode16(case: :lower)) ==
             "0x1005c8b8ee7a873576f5a6a9862c0c14909e01c1"

    assert call_data ==
             "0x4dd3b30b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"

    assert paymaster_and_data == "0x8d8f646cfffa073c207eb8f83d62cb3d842ade4e1234"

    assert call_gas_limit == 100_000
    assert verification_gas_limit == 100_000
    assert max_fee_per_gas == 1
    assert max_priority_fee_per_gas == 1
  end
end
