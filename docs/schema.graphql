schema {
  query: RootQueryType
}

type Account {
  account_current_bridged_udts(input: AccountChildUdtsInput = {page: 1, page_size: 20, sort_type: DESC}): [AccountCurrentBridgedUdt]
  account_current_udts(input: AccountChildUdtsInput = {page: 1, page_size: 20, sort_type: DESC}): [AccountCurrentUdt]
  contract_code: String
  eth_address: HashFull
  id: Int
  nonce: Int
  registry_address: String
  script: Json
  script_hash: HashAddress
  smart_contract: SmartContract
  token_transfer_count: Int
  transaction_count: Int
  type: AccountType
  udt: Udt
}

input AccountBridgedUdtsByScriptHashInput {
  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20

  """
  argument: the sort of type by custom condition
  
  default: desc
  """
  sort_type: SortType = DESC
  udt_script_hash: HashFull!
}

input AccountChildUdtsInput {
  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20

  """
  argument: the sort of type by custom condition
  
  default: desc
  """
  sort_type: SortType = DESC
}

input AccountCkbsInput {
  address_hashes: [String] = []
  script_hashes: [String] = []
}

type AccountCurrentBridgedUdt {
  account: Account
  address_hash: HashAddress
  block_number: Int
  id: Int
  inserted_at: DateTime
  layer1_block_number: Int
  udt: Udt
  udt_script_hash: HashFull
  updated_at: DateTime
  value: Bigint
  value_fetched_at: DateTime
}

input AccountCurrentBridgedUdtsInput {
  """
  argument: the list of account eth address
  example: ["0x15ca4f2165ff0e798d9c7434010eaacc4d768d85"]
  """
  address_hashes: [HashAddress] = []

  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20

  """
  argument: the list of account script hash
  example: ["0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"]
  """
  script_hashes: [HashAddress] = []
  udt_script_hash: HashFull
}

type AccountCurrentUdt {
  account: Account
  address_hash: HashAddress
  block_number: Int
  id: Int
  inserted_at: DateTime
  token_contract_address_hash: HashAddress
  udt: Udt
  updated_at: DateTime
  value: Bigint
  value_fetched_at: DateTime
}

input AccountCurrentUdtsInput {
  """
  argument: the list of account eth address
  example: ["0x15ca4f2165ff0e798d9c7434010eaacc4d768d85"]
  """
  address_hashes: [HashAddress] = []

  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20

  """
  argument: the list of account script hash
  example: ["0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"]
  """
  script_hashes: [HashFull] = []

  """
  argument: the address of smart contract which supply udts
  example: "0xbf1f27daea43849b67f839fd101569daaa321e2c"
  """
  token_contract_address_hash: HashAddress
}

input AccountIdInput {
  account_id: Int
}

input AccountInput {
  """
  address: account address(eth_address)
  example: "0x59b670e9fa9d0a427751af201d676719a970857b"
  
  script_hash: script hash with hash_full type
  example: "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"
  """
  address: HashAddress
  script_hash: HashFull
}

enum AccountType {
  ETH_ADDR_REG
  ETH_USER
  META_CONTRACT
  POLYJUICE_CONTRACT
  POLYJUICE_CREATOR
  UDT
}

type AccountUdt {
  account: Account
  address_hash: HashAddress
  token_contract_address_hash: HashAddress
  udt: Udt
  udt_script_hash: HashFull
  value: Bigint
}

input AccountUdtsByContractAddressInput {
  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20

  """
  argument: the sort of type by custom condition
  
  default: desc
  """
  sort_type: SortType = DESC
  token_contract_address_hash: HashAddress!
}

input AccountUdtsInput {
  address_hashes: [String] = []
  script_hashes: [String] = []
  token_contract_address_hash: HashAddress
  udt_script_hash: HashFull
}

"""
The `bigint` scalar type represents signed big integer
values parsed by the elixir `Decimal` library(which support big integer scenario).  The BigInt appears in a JSON
response as a string to preserve Big Interger.

Formally:
sign           ::=  '+' | '-'
digit          ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' |
                    '8' | '9'
digits         ::=  digit [digit]...
numeric-string ::=  [sign] digits| [sign] digit

Examples:

Some numeric strings are:

    "0"          -- zero
    "12"         -- a whole number
    "-76"        -- a signed whole number
"""
scalar Bigint

type Block {
  account: Account
  difficulty: Decimal
  extra_data: String
  gas_limit: Decimal
  gas_used: Decimal
  hash: HashFull
  layer1_block_number: Int
  layer1_tx_hash: HashFull
  logs_bloom: String
  nonce: String
  number: Int
  parent_hash: HashFull
  producer_address: HashAddress
  registry_id: Int
  sha3_uncles: String
  size: Int
  state_root: String
  status: BlockStatus
  timestamp: DateTime
  total_difficulty: Decimal
  transaction_count: Int
  transactions(input: PageAndSizeInput = {page: 1, page_size: 5}): [Transaction]
}

input BlockInput {
  hash: HashFull
  number: Int
}

input BlocksInput {
  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20

  """
  argument: the sort of type by custom condition
  
  default: desc
  """
  sort_type: SortType = DESC
}

enum BlockStatus {
  COMMITTED
  FINALIZED
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

"""
The `Decimal` scalar type represents signed double-precision fractional
values parsed by the `Decimal` library.  The Decimal appears in a JSON
response as a string to preserve precision.

Formally:
sign           ::=  '+' | '-'
digit          ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' |
                    '8' | '9'
indicator      ::=  'e' | 'E'
digits         ::=  digit [digit]...
decimal-part   ::=  digits '.' [digits] | ['.'] digits
exponent-part  ::=  indicator [sign] digits
infinity       ::=  'Infinity' | 'Inf'
nan            ::=  'NaN' [digits] | 'sNaN' [digits]
numeric-value  ::=  decimal-part [exponent-part] | infinity
numeric-string ::=  [sign] numeric-value | [sign] nan

Examples:

Some numeric strings are:

    "0"          -- zero
    "12"         -- a whole number
    "-76"        -- a signed whole number
    "12.70"      -- some decimal places
    "+0.003"     -- a plus sign is allowed, too
    "017."       -- the same as 17
    ".5"         -- the same as 0.5
    "4E+9"       -- exponential notation
    "0.73e-7"    -- exponential notation, negative power
    "Inf"        -- the same as Infinity
    "-infinity"  -- the same as -Inf
    "NaN"        -- not-a-Number
    "NaN8275"    -- diagnostic NaN
"""
scalar Decimal

"""
The address (40 (hex) characters / 160 bits / 20 bytes) is derived from the public key (128 (hex) characters /
512 bits / 64 bytes) which is derived from the private key (64 (hex) characters / 256 bits / 32 bytes).

The address is actually the last 40 characters of the keccak-256 hash of the public key with `0x` appended.
"""
scalar HashAddress

"""A 32-byte [KECCAK-256](https://en.wikipedia.org/wiki/SHA-3) hash."""
scalar HashFull

"""
The `Json` scalar type represents arbitrary json string data, represented as UTF-8
character sequences. The Json type is most often used to represent a free-form
human-readable json string.
"""
scalar Json

type Log {
  address_hash: HashAddress
  block_hash: HashFull
  block_number: Int
  data: String
  first_topic: String
  fourth_topic: String
  index: Int
  second_topic: String
  third_topic: String
  transaction_hash: HashFull
}

input LogInput {
  address_hash: HashAddress

  """argument: the end of block number(inclusive) for search query"""
  end_block_number: Int
  first_topic: String
  fourth_topic: String

  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20
  second_topic: String

  """
  argument: the sort of type by custom condition
  
  default: desc
  """
  sort_type: SortType = DESC

  """argument: the start of block number(inclusive) for search query"""
  start_block_number: Int
  third_topic: String
  transaction_hash: HashFull
}

"""
The `Naive DateTime` scalar type represents a naive date and time without
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string.
"""
scalar NaiveDateTime

input PageAndSizeInput {
  """
  argument: the page of query result, the relations of postgres offset: offset = (page - 1) * page_size
  
  default: 1
  limit: > 0
  """
  page: Int = 1

  """
  argument: the page_size of query result, it's the same of postgres limit
  
  default: 20
  limit: > 0
  """
  page_size: Int = 20
}

type PaginateMetadata {
  after: String
  before: String
  limit: Int
  total_count: Int
  total_count_cap_exceeded: Boolean
}

type PaginateSmartContracts {
  entries: [SmartContract]
  metadata: PaginateMetadata
}

type PaginateTokenTransfers {
  entries: [TokenTransfer]
  metadata: PaginateMetadata
}

type PaginateTrasactions {
  entries: [Transaction]
  metadata: PaginateMetadata
}

type PaginateUdts {
  entries: [Udt]
  metadata: PaginateMetadata
}

type Polyjuice {
  created_contract_address_hash: HashAddress
  gas_limit: Bigint
  gas_price: Bigint
  gas_used: Bigint
  id: Int
  input: String
  input_size: Int
  is_create: Boolean
  status: PolyjuiceStatus
  transaction_index: Int
  tx_hash: HashFull
  value: Bigint
}

type PolyjuiceCreator {
  code_hash: String
  fee_amount: Bigint
  fee_udt_id: Int
  hash_type: String
  id: Int
  script_args: String
  tx_hash: HashFull
}

enum PolyjuiceStatus {
  FAILED
  SUCCEED
}

type RootQueryType {
  """
  function: get account by account addresses
  
  request-example:
  query {
    account(input: {address: "0x59b670e9fa9d0a427751af201d676719a970857b"}){
      type
      eth_address
    }
  }
  
  result-example:
  {
    "data": {
      "account": {
        "eth_address": "0x59b670e9fa9d0a427751af201d676719a970857b",
        "type": "POLYJUICE_CONTRACT"
      }
    }
  }
  
  request-example-1:
  query {
    account(input: {script_hash: "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"}){
      type
      eth_address
      script_hash
    }
  }
  
  result-example:
  {
    "data": {
      "account": {
        "eth_address": null,
        "script_hash": "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e",
        "type": "ETH_ADDR_REG"
      }
    }
  }
  
  request-example-2:
  query {
    account(input: {address: "0xcae7ac7ea158326cc16b4a5f1668924966419455"}){
      type
      eth_address
      account_udts {
        id
        balance
        udt {
          id
          name
          decimal
        }
      }
    }
  }
  
  result-example-2:
  {
    "data": {
      "account": {
        "account_udts": [
          {
            "balance": "2599999999999999997122",
            "id": 527,
            "udt": {
              "decimal": null,
              "id": "80",
              "name": null
            }
          },
          {
            "balance": "2299999999989999656533",
            "id": 524,
            "udt": {
              "decimal": null,
              "id": "1",
              "name": null
            }
          }
        ],
        "eth_address": "0xcae7ac7ea158326cc16b4a5f1668924966419455",
        "type": "ETH_USER"
      }
    }
  }
  
  request-example-3:
  query {
    account(
      input: {
        script_hash: "0x946d08cc356c4fe13bc49929f1f709611fe0a2aaa336efb579dad4ca197d1551"
      }
    ) {
      type
      eth_address
      script_hash
      script
    }
  }
  
  
  {
    "data": {
      "account": {
        "eth_address": null,
        "script": {
          "account_merkle_state": {
            "account_count": 33776,
            "account_merkle_root": "0x2a3fc6ea37bf17b717630f1f8f02a18ef9e96edf7461d6f8df5d4e115f6eb9dd"
          },
          "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8",
          "block_merkle_state": {
            "block_count": 103767,
            "block_merkle_root": "0xb6b6d9befa9012b750b666df8522e8d164b222924028a4b91d0ba4eb2f1578cb"
          },
          "code_hash": "0x37b25df86ca495856af98dff506e49f2380d673b0874e13d29f7197712d735e8",
          "hash_type": "type",
          "last_finalized_block_number": 103666,
          "reverted_block_root": "0000000000000000000000000000000000000000000000000000000000000000",
          "status": "running"
        },
        "script_hash": "0x946d08cc356c4fe13bc49929f1f709611fe0a2aaa336efb579dad4ca197d1551",
        "type": "META_CONTRACT"
      }
    }
  }
  
  request-example-4:
  query {
    account(
      input: {
        script_hash: "0x64050af0d25c38ddf9455b8108654f7c5cc30fe6d871a303d83b1020edddd7a7"
      }
    ) {
      type
      script_hash
      script
      udt {
        id
        name
        decimal
      }
    }
  }
  
  {
    "data": {
      "account": {
        "script": {
          "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8dac0c53c572f451e56c092fdb520aec82f5f4bf8a5c02e1c4843f40c15f84c55",
          "code_hash": "0xb6176a6170ea33f8468d61f934c45c57d29cdc775bcd3ecaaec183f04b9f33d9",
          "hash_type": "type"
        },
        "script_hash": "0x64050af0d25c38ddf9455b8108654f7c5cc30fe6d871a303d83b1020edddd7a7",
        "type": "UDT",
        "udt": {
          "decimal": 18,
          "id": "80",
          "name": "USD Coin"
        }
      }
    }
  }
  
  request-example-5:
  query {
    account(
      input: {
        script_hash: "0x829cc5785a4d8ac642ede32cb3cb5cb9dc389d5892f2fc2afc760691445be194"
      }
    ) {
      type
      eth_address
      script_hash
      script
    }
  }
  
  {
    "data": {
      "account": {
        "eth_address": "0x2f760c8f8656bde4995f26b8963e2dd801000000",
        "script": {
          "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd801000000",
          "code_hash": "0x1629b04b49ded9e5747481f985b11cba6cdd4ffc167971a585e96729455ca736",
          "hash_type": "type"
        },
        "script_hash": "0x829cc5785a4d8ac642ede32cb3cb5cb9dc389d5892f2fc2afc760691445be194",
        "type": "POLYJUICE_CREATOR"
      }
    }
  }
  
  request-example-6:
  query {
    account(
      input: {
        script_hash: "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"
      }
    ) {
      type
      eth_address
      script_hash
      script
    }
  }
  
  {
    "data": {
      "account": {
        "eth_address": null,
        "script": {
          "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8",
          "code_hash": "0xa30dcbb83ebe571f49122d8d1ce4537679ebf511261c8ffaaa6679bf9fdea3a4",
          "hash_type": "type"
        },
        "script_hash": "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e",
        "type": "ETH_ADDR_REG"
      }
    }
  }
  
  request-example-7:
  query {
    account(
      input: {
        script_hash: "0x495D9CFB7B6FAEAEB0F5A7ED81A830A477F7AEEA8D53EF73ABDC2EC2F5FED07C"
      }
    ) {
      type
      eth_address
      script
      script_hash
      smart_contract {
        id
        account_id
        name
      }
      account_current_udts {
        id
        value
      }
      account_current_bridged_udts{
        id
        value
      }
    }
  }
  
  
  {
    "data": {
      "account": {
        "account_current_bridged_udts": [
          {
            "id": 1,
            "value": "1165507481400061309833"
          }
        ],
        "account_current_udts": [],
        "eth_address": "0x715ab282b873b79a7be8b0e8c13c4e8966a52040",
        "script": {
          "args": "0x702359ea7f073558921eb50d8c1c77e92f760c8f8656bde4995f26b8963e2dd8715ab282b873b79a7be8b0e8c13c4e8966a52040",
          "code_hash": "0x07521d0aa8e66ef441ebc31204d86bb23fc83e9edc58c19dbb1b0ebe64336ec0",
          "hash_type": "type"
        },
        "script_hash": "0x495d9cfb7b6faeaeb0f5a7ed81a830a477f7aeea8d53ef73abdc2ec2f5fed07c",
        "smart_contract": null,
        "type": "ETH_USER"
      }
    }
  }
  """
  account(input: AccountInput!): Account

  """
  request-result-example:
  query {
    account_bridged_udts_by_script_hash(
      input: {
        udt_script_hash: "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
        sort_type: ASC
        page_size: 1
      }
    ) {
      block_number
      id
      udt_script_hash
      value
      value_fetched_at
      udt {
        id
        name
        bridge_account_id
        script_hash
        decimal
        value
      }
      account {
        id
        eth_address
        script_hash
      }
    }
  }
  
  {
    "data": {
      "account_bridged_udts_by_script_hash": [
        {
          "account": {
            "eth_address": null,
            "id": 1,
            "script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
          },
          "block_number": 6135,
          "id": 49,
          "udt": {
            "bridge_account_id": null,
            "decimal": null,
            "id": "1",
            "name": null,
            "script_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "value": null
          },
          "udt_script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca",
          "value": "0",
          "value_fetched_at": null
        }
      ]
    }
  }
  """
  account_bridged_udts_by_script_hash(input: AccountBridgedUdtsByScriptHashInput!): [AccountCurrentBridgedUdt]

  """
  request-result-example:
  query {
    account_ckbs(
      input: { address_hashes: ["0x715AB282B873B79A7BE8B0E8C13C4E8966A52040"] }
    ) {
      udt_script_hash
      value
      udt {
        id
        name
        bridge_account_id
        script_hash
        decimal
        value
      }
      account {
        id
        eth_address
        script_hash
      }
    }
  }
  
  {
    "data": {
      "account_ckbs": [
        {
          "account": {
            "eth_address": null,
            "id": 1,
            "script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
          },
          "udt": {
            "bridge_account_id": 375,
            "decimal": 18,
            "id": "1",
            "name": "pCKB",
            "script_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "value": null
          },
          "udt_script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca",
          "value": "1165507481400061309833"
        }
      ]
    }
  }
  """
  account_ckbs(input: AccountCkbsInput!): [AccountUdt]

  """
  request-result-example:
  query {
    account_current_bridged_udts(
      input: {
        address_hashes: ["0x715AB282B873B79A7BE8B0E8C13C4E8966A52040"]
        udt_script_hash: "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
      }
    ) {
      block_number
      id
      udt_script_hash
      value
      value_fetched_at
      udt {
        id
        name
        bridge_account_id
        script_hash
        decimal
        value
      }
      account {
        id
        eth_address
        script_hash
      }
    }
  }
  
  {
    "data": {
      "account_current_bridged_udts": [
        {
          "account": {
            "eth_address": null,
            "id": 1,
            "script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
          },
          "block_number": null,
          "id": 1,
          "udt": {
            "bridge_account_id": null,
            "decimal": null,
            "id": "1",
            "name": null,
            "script_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "value": null
          },
          "udt_script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca",
          "value": "1165507481400061309833",
          "value_fetched_at": null
        }
      ]
    }
  }
  """
  account_current_bridged_udts(input: AccountCurrentBridgedUdtsInput!): [AccountCurrentBridgedUdt]

  """
  request-result-example:
  query {
    account_current_udts(
      input: {
        address_hashes: ["0xC6A44E4D2216A98B3A5086A64A33D94FBCC8FEC3"]
        token_contract_address_hash: "0xbb30e8691f6ffd5b4c0b2f73d17847e1e289ea80"
      }
    ) {
      block_number
      id
      token_contract_address_hash
      value
      value_fetched_at
      udt {
        id
        name
        bridge_account_id
        script_hash
        decimal
        value
      }
      account {
        id
        eth_address
        script_hash
      }
    }
  }
  
  
  {
    "data": {
      "account_current_udts": []
    }
  }
  """
  account_current_udts(input: AccountCurrentUdtsInput!): [AccountCurrentUdt]

  """
  request-result-example:
  query {
    account_udts(
      input: {
        address_hashes: ["0x715AB282B873B79A7BE8B0E8C13C4E8966A52040"],
  
        udt_script_hash: "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
      }
    ) {
      udt_script_hash
      value
      udt {
        id
        name
        bridge_account_id
        script_hash
        decimal
        value
      }
      account {
        id
        eth_address
        script_hash
      }
    }
  }
  
  {
    "data": {
      "account_udts": [
        {
          "account": {
            "eth_address": null,
            "id": 1,
            "script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
          },
          "udt": {
            "bridge_account_id": 375,
            "decimal": 18,
            "id": "1",
            "name": "pCKB",
            "script_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "value": null
          },
          "udt_script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca",
          "value": "1165507481400061309833"
        }
      ]
    }
  }
  """
  account_udts(input: AccountUdtsInput!): [AccountUdt]

  """
  request-result-example:
  query {
    account_udts_by_contract_address(
      input: {
        token_contract_address_hash: "0xD1556D3FE220B6EB816536AB448DE4E4EDC3E439"
        sort_type: ASC
        page_size: 1
      }
    ) {
      block_number
      id
      token_contract_address_hash
      value
      value_fetched_at
      udt {
        id
        name
        bridge_account_id
        script_hash
        decimal
        value
      }
      account {
        id
        eth_address
        script_hash
      }
    }
  }
  
  {
    "data": {
      "account_udts_by_contract_address": [
        {
          "account": {
            "eth_address": "0xd1556d3fe220b6eb816536ab448de4e4edc3e439",
            "id": 70,
            "script_hash": "0x66fb5a40e0bb9c62a68770b77393e2c5cc8428503025d9478550e99d0bed5138"
          },
          "block_number": 2857,
          "id": 5,
          "token_contract_address_hash": "0xd1556d3fe220b6eb816536ab448de4e4edc3e439",
          "udt": null,
          "value": "4",
          "value_fetched_at": "2022-06-01T06:03:53.730509Z"
        }
      ]
    }
  }
  """
  account_udts_by_contract_address(input: AccountUdtsByContractAddressInput!): [AccountCurrentUdt]

  """
  function: get block by block number or block hash
  
  request-result-example:
  query {
    block(input: {number: 1}){
      hash
      parent_hash
      number
      gas_used
      gas_limit
      account{
        id
        eth_address
      }
      transactions (input: {page: 1, page_size: 2}) {
        type
        from_account_id
        to_account_id
      }
    }
  }
  
  {
    "data": {
      "block": {
        "account": null,
        "gas_limit": "12500000",
        "gas_used": "0",
        "hash": "0x4ac339b063e52dac1b845d935788f379ebcdb0e33ecce077519f39929dbc8829",
        "number": 1,
        "parent_hash": "0x61bcff6f20e8be09bbe8e36092a9cc05dd3fa67e3841e206e8c30ae0dd7032df",
        "transactions": []
      }
    }
  }
  """
  block(input: BlockInput): Block

  """
  function: get list of block sort by block number
  
  request-example:
  query {
    block(input: {number: 14938}){
      hash
      parent_hash
      number
      gas_used
      gas_limit
      producer_address
      account{
        eth_address
      }
      transactions (input: {page: 1, page_size: 2}) {
        type
        from_account_id
        to_account_id
      }
    }
  }
  
  result-example:
  {
    "data": {
      "block": {
        "account": null,
        "gas_limit": "12500000",
        "gas_used": "0",
        "hash": "0x089f36f4f1eb1060e12ade101e4a6326423fa6cd11915d9bf1ef4bacafdbe663",
        "number": 14938,
        "parent_hash": "0xa552df86bad0233d0acb183056b095ac50abfa93161ff6b62ebe52bac2e53776",
        "producer_address": "715ab282b873b79a7be8b0e8c13c4e8966a52040",
        "transactions": []
      }
    }
  }
  """
  blocks(input: BlocksInput = {page: 1, page_size: 10, sort_type: DESC}): [Block]

  """
  function: get udt by contract address
  
  request-example:
  query {
    get_udt_by_account_id(input: {account_id: 80}){
      id
      name
      type
      supply
      account{
        eth_address
      }
    }
  }
  
  {
    "data": {
      "get_udt_by_account_id": {
        "account": {
          "eth_address": null
        },
        "id": "80",
        "name": "USD Coin",
        "supply": "9999999999",
        "type": "BRIDGE"
      }
    }
  }
  """
  get_udt_by_account_id(input: AccountIdInput!): Udt

  """
  function: get list of logs by filter or conditions
  
  request-example:
  query {
    logs(input: {first_topic: "0x95e0325a2d4f803db1237b0e454f7d9a09ec46941e478e3e98c510d8f1506031",end_block_number:
  9988, page: 1, page_size: 1}) {
      transaction_hash
      block_number
      address_hash
      data
      first_topic
      second_topic
      third_topic
      fourth_topic
    }
  }
  
  result-example:
  {
    "data": {
      "logs": [
        {
          "address_hash": "0x6589f40e144a03da53234dc98a47da36160dbf77",
          "block_number": 9988,
          "data": "0x00000000000000000000000000000000000000000000000000000000000027040000000000000000000000000000000000000000000000000000000000000000",
          "first_topic": "0x95e0325a2d4f803db1237b0e454f7d9a09ec46941e478e3e98c510d8f1506031",
          "fourth_topic": null,
          "second_topic": null,
          "third_topic": null,
          "transaction_hash": "0xeaf751c7eb86b679b7138fac22c603fccb0ca397bccce5a74e5372da7ea12c22"
        }
      ]
    }
  }
  """
  logs(input: LogInput!): [Log]

  """
  function: get smart contract by address
  
  request-result-example:
  query {
    smart_contract(
      input: { contract_address: "0x2503A1A79A443F3961EE96A8C5EC513638129614" }
    ) {
      name
      account_id
      account {
        eth_address
      }
    }
  }
  {
    "data": {
      "smart_contract": {
        "account": {
          "eth_address": "0x2503a1a79a443f3961ee96a8c5ec513638129614"
        },
        "account_id": "6841",
        "name": "EIP20"
      }
    }
  }
  
  request-result-example2:
  query {
    smart_contract(
      input: { script_hash: "0x9B55204439C78D3B9CBCC62C03F31E47C8457FD39CA9A9EB805B364B45C26C38" }
    ) {
      name
      account_id
      account {
        eth_address
      }
    }
  }
  {
    "data": {
      "smart_contract": {
        "account": {
          "eth_address": "0x2503a1a79a443f3961ee96a8c5ec513638129614"
        },
        "account_id": "6841",
        "name": "EIP20"
      }
    }
  }
  """
  smart_contract(input: SmartContractInput!): SmartContract

  """
  function: get list of smart contracts
  
  request-result-example:
  query {
    smart_contracts(input: { sorter: [{ sort_type: ASC, sort_value: ID }] }) {
      entries {
        name
        account_id
        account {
          eth_address
        }
      }
      metadata {
        total_count
        after
        before
      }
    }
  }
  
  
  {
    "data": {
      "smart_contracts": {
        "entries": [
          {
            "account": {
              "eth_address": "0x2503a1a79a443f3961ee96a8c5ec513638129614"
            },
            "account_id": "6841",
            "name": "EIP20"
          }
        ],
        "metadata": {
          "after": null,
          "before": null,
          "total_count": 1
        }
      }
    }
  }
  
  multi-table-sorter-example:
  query {
    smart_contracts(
      input: { sorter: [{ sort_type: ASC, sort_value: EX_TX_COUNT }] }
    ) {
      entries {
        name
        account_id
        account {
          eth_address
        }
      }
      metadata {
        total_count
        after
        before
      }
    }
  }
  {
    "data": {
      "smart_contracts": {
        "entries": [
          {
            "account": {
              "eth_address": "0x2503a1a79a443f3961ee96a8c5ec513638129614"
            },
            "account_id": "6841",
            "name": "EIP20"
          }
        ],
        "metadata": {
          "after": null,
          "before": null,
          "total_count": 1
        }
      }
    }
  }
  """
  smart_contracts(input: SmartContractsInput): PaginateSmartContracts

  """
  function: get list of token transfers by filter
  
  example:
  query {
    token_transfers(
      input: {
        from_address: "0x966b30e576a4d6731996748b48dd67c94ef29067"
        to_address: "0xbd6250d17fc557dfe39a9eb3882c421d4c7f6413"
        start_block_number: 90
        end_block_number: 90
        limit: 2
        combine_from_to: true
  
        sorter: [
          { sort_type: ASC, sort_value: BLOCK_NUMBER }
          { sort_type: ASC, sort_value: TRANSACTION_HASH }
          { sort_type: ASC, sort_value: LOG_INDEX }
        ]
      }
    ) {
      entries {
        transaction_hash
        block_number
        to_account {
          eth_address
        }
        to_address
        from_account {
          eth_address
        }
      }
  
      metadata {
        total_count
        before
        after
      }
    }
  }
  
  {
    "data": {
      "token_transfers": {
        "entries": [
          {
            "block_number": 90,
            "from_account": {
              "eth_address": "0x966b30e576a4d6731996748b48dd67c94ef29067"
            },
            "to_account": {
              "eth_address": "0xc6a44e4d2216a98b3a5086a64a33d94fbcc8fec3"
            },
            "to_address": "0xc6a44e4d2216a98b3a5086a64a33d94fbcc8fec3",
            "transaction_hash": "0x65ea60c7291f5aec6e9f86f6b4af97f6287409fc72f66975af6203721d10d409"
          },
          {
            "block_number": 90,
            "from_account": {
              "eth_address": "0x966b30e576a4d6731996748b48dd67c94ef29067"
            },
            "to_account": {
              "eth_address": "0xc6a44e4d2216a98b3a5086a64a33d94fbcc8fec3"
            },
            "to_address": "0xc6a44e4d2216a98b3a5086a64a33d94fbcc8fec3",
            "transaction_hash": "0xc3c63aa91100e6c14cea294559eacea33d6a12ed3be89f303247e63f670c2c34"
          }
        ],
        "metadata": {
          "after": "g3QAAAADZAAMYmxvY2tfbnVtYmVyYVpkAAlsb2dfaW5kZXhhAWQAEHRyYW5zYWN0aW9uX2hhc2h0AAAAA2QACl9fc3RydWN0X19kACJFbGl4aXIuR29kd29rZW5FeHBsb3Jlci5DaGFpbi5IYXNoZAAKYnl0ZV9jb3VudGEgZAAFYnl0ZXNtAAAAIMPGOqkRAObBTOopRVnqzqM9ahLtO-ifMDJH5j9nDCw0",
          "before": null,
          "total_count": 3
        }
      }
    }
  }
  
  example2:
  query {
    token_transfers(
      input: {
        from_address: "0x966b30e576a4d6731996748b48dd67c94ef29067"
        to_address: "0xbd6250d17fc557dfe39a9eb3882c421d4c7f6413"
        start_block_number: 90
        end_block_number: 909999
        age_range_start: "2022-06-01T04:59:29"
        age_range_end: "2022-06-01T06:59:29"
        limit: 1
        combine_from_to: true
  
        sorter: [
          { sort_type: ASC, sort_value: BLOCK_NUMBER }
          { sort_type: ASC, sort_value: TRANSACTION_HASH }
          { sort_type: ASC, sort_value: LOG_INDEX }
        ]
      }
    ) {
      entries {
        transaction_hash
        block_number
        updated_at
        to_account {
          eth_address
        }
        to_address
        from_account {
          eth_address
        }
      }
  
      metadata {
        total_count
        before
        after
      }
    }
  }
  
  {
    "data": {
      "token_transfers": {
        "entries": [
          {
            "block_number": 1396,
            "from_account": {
              "eth_address": "0x966b30e576a4d6731996748b48dd67c94ef29067"
            },
            "to_account": {
              "eth_address": "0x074182e2558a108f3f310c29f6fb1b3bd31908ed"
            },
            "to_address": "0x074182e2558a108f3f310c29f6fb1b3bd31908ed",
            "transaction_hash": "0x74c0a1d269a3f8107e5b62f25aad6663f8905086423894c265007b2befc8f919",
            "updated_at": "2022-06-01T05:29:35"
          }
        ],
        "metadata": {
          "after": "g3QAAAADZAAMYmxvY2tfbnVtYmVyYgAABXRkAAlsb2dfaW5kZXhhAWQAEHRyYW5zYWN0aW9uX2hhc2h0AAAAA2QACl9fc3RydWN0X19kACJFbGl4aXIuR29kd29rZW5FeHBsb3Jlci5DaGFpbi5IYXNoZAAKYnl0ZV9jb3VudGEgZAAFYnl0ZXNtAAAAIHTAodJpo_gQflti8lqtZmP4kFCGQjiUwmUAeyvvyPkZ",
          "before": null,
          "total_count": 16
        }
      }
    }
  }
  """
  token_transfers(input: TokenTransferInput! = {combine_from_to: true, limit: 20, sorter: [{sort_type: DESC, sort_value: BLOCK_NUMBER}, {sort_type: DESC, sort_value: LOG_INDEX}, {sort_type: ASC, sort_value: TRANSACTION_HASH}]}): PaginateTokenTransfers

  """
  function: get transaction by transaction_hash
  
  request-example:
  query {
    transaction(
      input: {
        eth_hash: "0xcdbda9ec578e73e886446d3bd5ca070d77a908be4187fc0e835c7c1598a3fcfa"
      }
    ) {
      hash
      nonce
      type
      index
      from_account {
        eth_address
        type
      }
      to_account {
        eth_address
        type
      }
      polyjuice {
        is_create
        value
        status
        input
        created_contract_address_hash
        gas_used
        gas_limit
        gas_price
      }
      block {
        number
        hash
        timestamp
        status
        layer1_block_number
      }
    }
  }
  
  
  result-example:
  {
    "data": {
      "transaction": {
        "block": {
          "hash": "0x08b5d6747151e7cc0a2ffd81505d3db39af268c9c1c753a22e7c80890e3b94c5",
          "layer1_block_number": 5293647,
          "number": 81,
          "status": "FINALIZED",
          "timestamp": "2022-05-08T05:15:14.234000Z"
        },
        "from_account": {
          "eth_address": "0x966b30e576a4d6731996748b48dd67c94ef29067",
          "type": "ETH_USER"
        },
        "hash": "0xc7ab89121ab5727b09e007cc04176216e4d5fab1fb0ebe33320b7075e7e54533",
        "index": 0,
        "nonce": 0,
        "polyjuice": {
          "created_contract_address_hash": "0xf9f9bd767dd10ad384182769d47d9e239f281bcd",
          "gas_limit": "245",
          "gas_price": "1",
          "gas_used": "245",
          "input": "0x608060405234801561001057600080fd5b506103e2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636fd902e11161005b5780636fd902e114610105578063796b89b9146101235780637c0dacdb14610141578063ee82ac5e1461014b57610088565b806312e05dd11461008d5780632df8e949146100ab5780633408e470146100c957806342cbb15c146100e7575b600080fd5b61009561017b565b6040516100a291906102a3565b60405180910390f35b6100b3610183565b6040516100c0919061026d565b60405180910390f35b6100d161018b565b6040516100de91906102a3565b60405180910390f35b6100ef610193565b6040516100fc91906102a3565b60405180910390f35b61010d6101a7565b60405161011a91906102a3565b60405180910390f35b61012b6101af565b60405161013891906102a3565b60405180910390f35b6101496101b7565b005b61016560048036038101906101609190610213565b6101f3565b6040516101729190610288565b60405180910390f35b600044905090565b600041905090565b600046905090565b60006001436101a291906102e7565b905090565b600043905090565b600042905090565b7f95e0325a2d4f803db1237b0e454f7d9a09ec46941e478e3e98c510d8f15060314343406040516101e99291906102be565b60405180910390a1565b600081409050919050565b60008135905061020d81610395565b92915050565b60006020828403121561022957610228610390565b5b6000610237848285016101fe565b91505092915050565b6102498161031b565b82525050565b6102588161032d565b82525050565b61026781610357565b82525050565b60006020820190506102826000830184610240565b92915050565b600060208201905061029d600083018461024f565b92915050565b60006020820190506102b8600083018461025e565b92915050565b60006040820190506102d3600083018561025e565b6102e0602083018461024f565b9392505050565b60006102f282610357565b91506102fd83610357565b9250828210156103105761030f610361565b5b828203905092915050565b600061032682610337565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61039e81610357565b81146103a957600080fd5b5056fea2646970667358221220d273a25c31e711ab76ca9928e49a2f327bab9ac3707697ef7567ca28d6673d3a64736f6c63430008060033",
          "is_create": true,
          "status": "SUCCEED",
          "value": "0"
        },
        "to_account": {
          "eth_address": "0x2f760c8f8656bde4995f26b8963e2dd801000000",
          "type": "POLYJUICE_CREATOR"
        },
        "type": "POLYJUICE"
      }
    }
  }
  """
  transaction(input: TransactionInput!): Transaction

  """
  sorter-example:
  query {
    transactions(
      input: {
        limit: 1
        sorter: [
          { sort_type: ASC, sort_value: BLOCK_NUMBER }
          { sort_type: ASC, sort_value: HASH }
          { sort_type: ASC, sort_value: INDEX }
        ]
      }
    ) {
      entries {
        hash
        eth_hash
        block_hash
        block_number
        type
        from_account_id
        from_account {
          script_hash
          id
          eth_address
        }
        to_account_id
      }
  
      metadata {
        total_count
        before
        after
      }
    }
  }
  
  {
    "data": {
      "transactions": {
        "entries": [
          {
            "block_hash": "0x4ed214a4aa0085da12c80468ea299d85ea043d04b38b93e26218bab7849f5e40",
            "block_number": 6,
            "eth_hash": null,
            "from_account": {
              "eth_address": "0x715ab282b873b79a7be8b0e8c13c4e8966a52040",
              "id": 3,
              "script_hash": "0x495d9cfb7b6faeaeb0f5a7ed81a830a477f7aeea8d53ef73abdc2ec2f5fed07c"
            },
            "from_account_id": 3,
            "hash": "0xc621e5cd5a7d49c32e87b59956886c3747be77ecf7a7942ebaa5e2de96e9aad3",
            "to_account_id": 0,
            "type": "POLYJUICE_CREATOR"
          }
        ],
        "metadata": {
          "after": "g3QAAAADZAAMYmxvY2tfbnVtYmVyYQZkAARoYXNodAAAAANkAApfX3N0cnVjdF9fZAAiRWxpeGlyLkdvZHdva2VuRXhwbG9yZXIuQ2hhaW4uSGFzaGQACmJ5dGVfY291bnRhIGQABWJ5dGVzbQAAACDGIeXNWn1Jwy6HtZlWiGw3R7537PenlC66peLelumq02QABWluZGV4YQA=",
          "before": null,
          "total_count": 10000
        }
      }
    }
  }
  
  block-number-and-age-range-example:
  query {
    transactions(
      input: {
        to_script_hash: "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"
        start_block_number: 1
        end_block_number: 2624399
        limit: 2
        age_range_start: "2022-06-11T16:32:04"
        age_range_end: "2022-06-11T16:32:54"
      }
    ) {
      entries {
        block_hash
        block_number
        type
        from_account_id
        from_account {
          script_hash
          id
          eth_address
        }
        to_account_id
        updated_at
      }
  
      metadata {
        total_count
        before
        after
      }
    }
  }
  
  {
    "data": {
      "transactions": {
        "entries": [
          {
            "block_hash": "0x23ae98d322fb7d0a991e5cf5f55a421040131b4423cf1c47965ddc30458aa3c5",
            "block_number": 95495,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account_id": 2,
            "type": "ETH_ADDRESS_REGISTRY",
            "updated_at": "2022-06-11T16:32:54"
          },
          {
            "block_hash": "0xa89010460abfb53bf85fc74ae98480d3d6c1708c2ce8586aac549544289e5a23",
            "block_number": 95494,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account_id": 2,
            "type": "ETH_ADDRESS_REGISTRY",
            "updated_at": "2022-06-11T16:32:04"
          }
        ],
        "metadata": {
          "after": "g3QAAAADZAAMYmxvY2tfbnVtYmVyYgABdQZkAARoYXNodAAAAANkAApfX3N0cnVjdF9fZAAiRWxpeGlyLkdvZHdva2VuRXhwbG9yZXIuQ2hhaW4uSGFzaGQACmJ5dGVfY291bnRhIGQABWJ5dGVzbQAAACB83ranDTslB0BzAXr7QxE-g_1Q9DwOZymXEuZVtgw5gGQABWluZGV4YQI=",
          "before": null,
          "total_count": 3
        }
      }
    }
  }
  
  from-to-example:
  query {
    transactions(
      input: {
        from_eth_address: "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3"
        start_block_number: 1
        end_block_number: 2624399
        limit: 5
        age_range_start: "2022-06-11T16:32:04"
        age_range_end: "2022-06-11T16:32:54"
      }
    ) {
      entries {
        block_hash
        block_number
        type
        from_account_id
        from_account {
          script_hash
          id
          eth_address
        }
        to_account_id
        to_account {
          script_hash
          id
          eth_address
        }
        updated_at
      }
  
      metadata {
        total_count
        before
        after
      }
    }
  }
  
  {
    "data": {
      "transactions": {
        "entries": [
          {
            "block_hash": "0x23ae98d322fb7d0a991e5cf5f55a421040131b4423cf1c47965ddc30458aa3c5",
            "block_number": 95495,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account": {
              "eth_address": null,
              "id": 2,
              "script_hash": "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"
            },
            "to_account_id": 2,
            "type": "ETH_ADDRESS_REGISTRY",
            "updated_at": "2022-06-11T16:32:54"
          },
          {
            "block_hash": "0x23ae98d322fb7d0a991e5cf5f55a421040131b4423cf1c47965ddc30458aa3c5",
            "block_number": 95495,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account": {
              "eth_address": null,
              "id": 0,
              "script_hash": "0x946d08cc356c4fe13bc49929f1f709611fe0a2aaa336efb579dad4ca197d1551"
            },
            "to_account_id": 0,
            "type": "POLYJUICE_CREATOR",
            "updated_at": "2022-06-11T16:32:54"
          },
          {
            "block_hash": "0xa89010460abfb53bf85fc74ae98480d3d6c1708c2ce8586aac549544289e5a23",
            "block_number": 95494,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account": {
              "eth_address": null,
              "id": 2,
              "script_hash": "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"
            },
            "to_account_id": 2,
            "type": "ETH_ADDRESS_REGISTRY",
            "updated_at": "2022-06-11T16:32:04"
          },
          {
            "block_hash": "0xa89010460abfb53bf85fc74ae98480d3d6c1708c2ce8586aac549544289e5a23",
            "block_number": 95494,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account": {
              "eth_address": null,
              "id": 0,
              "script_hash": "0x946d08cc356c4fe13bc49929f1f709611fe0a2aaa336efb579dad4ca197d1551"
            },
            "to_account_id": 0,
            "type": "POLYJUICE_CREATOR",
            "updated_at": "2022-06-11T16:32:04"
          },
          {
            "block_hash": "0xa89010460abfb53bf85fc74ae98480d3d6c1708c2ce8586aac549544289e5a23",
            "block_number": 95494,
            "from_account": {
              "eth_address": "0x2088d0e35c23e7c344f96e57be19043d6e2a44f3",
              "id": 14578,
              "script_hash": "0x07cb90b74c9b22a6ff8357332b589e8dbfc3cb119d4535c76cc51c43ab9c5f9d"
            },
            "from_account_id": 14578,
            "to_account": {
              "eth_address": null,
              "id": 2,
              "script_hash": "0x08c9937e412e135928fd6dec7255965ddd7df4d5a163564b60895100bb3b2f9e"
            },
            "to_account_id": 2,
            "type": "ETH_ADDRESS_REGISTRY",
            "updated_at": "2022-06-11T16:32:04"
          }
        ],
        "metadata": {
          "after": null,
          "before": null,
          "total_count": 5
        }
      }
    }
  }
  """
  transactions(input: TransactionsInput = {limit: 20, sorter: [{sort_type: DESC, sort_value: BLOCK_NUMBER}, {sort_type: DESC, sort_value: INDEX}, {sort_type: ASC, sort_value: HASH}]}): PaginateTrasactions

  """
  function: get udt by contract address
  
  request-example:
  query {
    udt(input: {script_hash: "0x64050AF0D25C38DDF9455B8108654F7C5CC30FE6D871A303D83B1020EDDDD7A7"}){
      id
      name
      type
      supply
      account{
        eth_address
      }
    }
  }
  
  result-example:
  {
    "data": {
      "udt": {
        "account": {
          "eth_address": null
        },
        "id": "80",
        "name": null,
        "supply": null,
        "type": "BRIDGE"
      }
    }
  }
  """
  udt(input: SmartContractInput!): Udt

  """
  function: get list of udts
  
  pagination-example:
  query {
    udts(
      input: {
        limit: 1
        after: "g3QAAAABZAACaWRhAQ=="
        sorter: [{ sort_type: ASC, sort_value: ID }]
      }
    ) {
      entries {
        id
        name
        type
        supply
        account {
          eth_address
          script_hash
        }
      }
      metadata {
        total_count
        after
        before
      }
    }
  }
  
  {
    "data": {
      "udts": {
        "entries": [
          {
            "account": {
              "eth_address": null,
              "script_hash": "0x64050af0d25c38ddf9455b8108654f7c5cc30fe6d871a303d83b1020edddd7a7"
            },
            "id": "80",
            "name": null,
            "supply": null,
            "type": "BRIDGE"
          }
        ],
        "metadata": {
          "after": "g3QAAAABZAACaWRhUA==",
          "before": "g3QAAAABZAACaWRhUA==",
          "total_count": 14
        }
      }
    }
  }
  
  
  fuzzy-name-example:
  fuzzy name use postgresql ilike keyword, pattern matching docs like:
  https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-LIKE
  
  query {
    udts(
      input: {
        limit: 1
        fuzzy_name: "%ckb%"
        sorter: [{ sort_type: ASC, sort_value: ID }]
      }
    ) {
      entries {
        id
        name
        type
        supply
        account {
          eth_address
          script_hash
        }
      }
      metadata {
        total_count
        after
        before
      }
    }
  }
  
  {
    "data": {
      "udts": {
        "entries": [
          {
            "account": {
              "eth_address": null,
              "script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
            },
            "id": "1",
            "name": "pCKB",
            "supply": "12800091655514882421855103",
            "type": "BRIDGE"
          }
        ],
        "metadata": {
          "after": null,
          "before": null,
          "total_count": 1
        }
      }
    }
  }
  
  sorter-example:
  query {
    udts(
      input: {
        limit: 3
        sorter: [{ sort_type: ASC, sort_value: SUPPLY }]
      }
    ) {
      entries {
        id
        name
        type
        supply
        account {
          eth_address
          script_hash
        }
      }
      metadata {
        total_count
        after
        before
      }
    }
  }
  
  {
    "data": {
      "udts": {
        "entries": [
          {
            "account": {
              "eth_address": "0x2503a1a79a443f3961ee96a8c5ec513638129614",
              "script_hash": "0x9b55204439c78d3b9cbcc62c03f31e47c8457fd39ca9a9eb805b364b45c26c38"
            },
            "id": "6841",
            "name": "test",
            "supply": "111",
            "type": "NATIVE"
          },
          {
            "account": {
              "eth_address": null,
              "script_hash": "0x3e1301e759261b676ce68d0d97936cd431a4af2a34072aa94e44655909765eb4"
            },
            "id": "6571",
            "name": "GodwokenToken on testnet_v1",
            "supply": "3247",
            "type": "BRIDGE"
          },
          {
            "account": {
              "eth_address": "0xd3ecf26a4a1e99c8717d7d8e365933fffa7d74d6",
              "script_hash": "0xb9150cbee429e205f9c956da7def16344232f50c851d9a5b0f7ef6f211c91cbf"
            },
            "id": "20021",
            "name": " My Hardhat Token",
            "supply": "100000000000000000000",
            "type": "NATIVE"
          }
        ],
        "metadata": {
          "after": "g3QAAAABZAAGc3VwcGx5dAAAAARkAApfX3N0cnVjdF9fZAAORWxpeGlyLkRlY2ltYWxkAARjb2VmbgkAAAAQYy1ex2sFZAADZXhwYQBkAARzaWduYQE=",
          "before": null,
          "total_count": 16
        }
      }
    }
  }
  
  sorter-example:
  query {
    udts(
      input: {
        limit: 3
        sorter: [{ sort_type: ASC, sort_value: NAME }]
      }
    ) {
      entries {
        id
        name
        type
        supply
        account {
          eth_address
          script_hash
        }
      }
      metadata {
        total_count
        after
        before
      }
    }
  }
  
  {
    "data": {
      "udts": {
        "entries": [
          {
            "account": {
              "eth_address": null,
              "script_hash": "0x3e1301e759261b676ce68d0d97936cd431a4af2a34072aa94e44655909765eb4"
            },
            "id": "6571",
            "name": "GodwokenToken on testnet_v1",
            "supply": "3247",
            "type": "BRIDGE"
          },
          {
            "account": {
              "eth_address": "0xd3ecf26a4a1e99c8717d7d8e365933fffa7d74d6",
              "script_hash": "0xb9150cbee429e205f9c956da7def16344232f50c851d9a5b0f7ef6f211c91cbf"
            },
            "id": "20021",
            "name": " My Hardhat Token",
            "supply": "100000000000000000000",
            "type": "NATIVE"
          },
          {
            "account": {
              "eth_address": null,
              "script_hash": "0x595cc14e574a708dc70a320d2026f79374246ed4659261131cdda7dd5814b5ca"
            },
            "id": "1",
            "name": "pCKB",
            "supply": "12800091655514882421855103",
            "type": "BRIDGE"
          }
        ],
        "metadata": {
          "after": "g3QAAAABZAAEbmFtZW0AAAAEcENLQg==",
          "before": null,
          "total_count": 16
        }
      }
    }
  }
  """
  udts(input: UdtsInput = {limit: 20, sorter: [{sort_type: ASC, sort_value: NAME}]}): PaginateUdts
}

type SmartContract {
  abi: [Json]
  account: Account
  account_id: String
  compiler_file_format: String
  compiler_version: String
  constructor_arguments: String
  contract_source_code: String
  deployment_tx_hash: HashFull
  id: Int
  name: String
  other_info: String
}

input SmartContractInput {
  contract_address: HashAddress
  script_hash: HashFull
}

input SmartContractsInput {
  """Fetch the records after this cursor."""
  after: String

  """Fetch the records before this cursor."""
  before: String

  """
  Limits the number of records returned per page. Note that this number will be capped by maximum_limit=100. Defaults to 20.
  """
  limit: Int = 20
  sorter: [SmartContractsSorterInput] = [{sort_type: ASC, sort_value: ID}, {sort_type: ASC, sort_value: NAME}]
}

enum SmartContractsSorter {
  EX_BALANCE
  EX_TX_COUNT
  ID
  NAME
}

input SmartContractsSorterInput {
  sort_type: SortType
  sort_value: SmartContractsSorter
}

enum SortType {
  ASC
  DESC
}

type TokenTransfer {
  amount: Decimal
  block: Block
  block_hash: HashFull
  block_number: Int
  from_account: Account
  from_address: HashAddress
  inserted_at: NaiveDateTime
  log_index: Int
  polyjuice: Polyjuice
  to_account: Account
  to_address: HashAddress
  token_contract_address_hash: HashAddress
  token_id: Decimal
  transaction: Transaction
  transaction_hash: HashFull
  udt: Udt
  updated_at: NaiveDateTime
}

input TokenTransferInput {
  """Fetch the records after this cursor."""
  after: String
  age_range_end: NaiveDateTime
  age_range_start: NaiveDateTime

  """Fetch the records before this cursor."""
  before: String

  """
  if combine_from_to is true, then from_address and to_address are combined into
  query condition like `address = from_address OR address = to_address`
  """
  combine_from_to: Boolean = true

  """argument: the end of block number(inclusive) for search query"""
  end_block_number: Int
  from_address: HashAddress

  """
  Limits the number of records returned per page. Note that this number will be capped by maximum_limit=100. Defaults to 20.
  """
  limit: Int = 20
  sorter: [TokenTransfersSorterInput] = [{sort_type: DESC, sort_value: BLOCK_NUMBER}, {sort_type: DESC, sort_value: LOG_INDEX}, {sort_type: ASC, sort_value: TRANSACTION_HASH}]

  """argument: the start of block number(inclusive) for search query"""
  start_block_number: Int
  to_address: HashAddress
  token_contract_address_hash: HashAddress
  transaction_hash: HashFull
}

enum TokenTransfersSorter {
  BLOCK_NUMBER
  LOG_INDEX
  TRANSACTION_HASH
}

input TokenTransfersSorterInput {
  sort_type: SortType
  sort_value: TokenTransfersSorter
}

type Transaction {
  args: String
  block: Block
  block_hash: HashFull
  block_number: Int
  eth_hash: HashFull
  from_account: Account
  from_account_id: Int
  hash: HashFull
  index: Int
  inserted_at: NaiveDateTime
  nonce: Int
  polyjuice: Polyjuice
  polyjuice_creator: PolyjuiceCreator
  to_account: Account
  to_account_id: Int
  type: TransactionType
  updated_at: NaiveDateTime
}

input TransactionInput {
  eth_hash: HashFull
  transaction_hash: HashFull
}

input TransactionsInput {
  """Fetch the records after this cursor."""
  after: String
  age_range_end: NaiveDateTime
  age_range_start: NaiveDateTime

  """Fetch the records before this cursor."""
  before: String

  """argument: the end of block number(inclusive) for search query"""
  end_block_number: Int
  from_eth_address: HashAddress
  from_script_hash: HashFull

  """
  Limits the number of records returned per page. Note that this number will be capped by maximum_limit=100. Defaults to 20.
  """
  limit: Int = 20
  sorter: [TransactionsSorterInput] = [{sort_type: DESC, sort_value: BLOCK_NUMBER}, {sort_type: DESC, sort_value: INDEX}, {sort_type: ASC, sort_value: HASH}]

  """argument: the start of block number(inclusive) for search query"""
  start_block_number: Int
  to_eth_address: HashAddress
  to_script_hash: HashFull
}

enum TransactionsSorter {
  BLOCK_NUMBER
  HASH
  INDEX
}

input TransactionsSorterInput {
  sort_type: SortType
  sort_value: TransactionsSorter
}

enum TransactionType {
  ETH_ADDRESS_REGISTRY
  POLYJUICE
  POLYJUICE_CREATOR
}

type Udt {
  account: Account
  bridge_account_id: Int
  decimal: Int
  description: String
  icon: String
  id: String
  name: String
  official_site: String
  price: Decimal
  script_hash: HashFull
  supply: Decimal
  symbol: String
  type: UdtType
  type_script: Json
  value: Decimal
}

input UdtsInput {
  """Fetch the records after this cursor."""
  after: String

  """Fetch the records before this cursor."""
  before: String
  fuzzy_name: String

  """
  Limits the number of records returned per page. Note that this number will be capped by maximum_limit=100. Defaults to 20.
  """
  limit: Int = 20
  sorter: [UdtsSorterInput] = [{sort_type: ASC, sort_value: NAME}]
  type: UdtType
}

enum UdtsSorter {
  ID
  NAME
  SUPPLY
}

input UdtsSorterInput {
  sort_type: SortType
  sort_value: UdtsSorter
}

enum UdtType {
  BRIDGE
  NATIVE
}

