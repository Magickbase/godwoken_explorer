defmodule GodwokenRPC.Web3.FetchedBlockByHash do
  @doc """
  ## Examples
  {:ok,
    %{
      "difficulty" => "0x8e1bc9bf04000",
      "extraData" => "0x",
      "gasLimit" => "0xbebc20",
      "gasUsed" => "0x0",
      "hash" => "0xf29aba4685a3d287d388f6976367e2a76f77747b943e1a6f3c42d227bd917708",
      "logsBloom" => "0x
      "miner" => "0x68f5cea51fa6fcfdcc10f6cddcafa13bf6717436",
      "mixHash" => "0x0000000000000000000000000000000000000000000000000000000000000000",
      "nonce" => "0x0000000000000000",
      "number" => "0x20ed",
      "parentHash" => "0xaff6cf9183809ac907a7962ff73947e22afaa97949b8c1674c8dec49d5201087",
      "receiptsRoot" => "0x0000000000000000000000000000000000000000000000000000000000000000",
      "sha3Uncles" => "0x0000000000000000000000000000000000000000000000000000000000000000",
      "size" => "0x164",
      "stateRoot" => "0x0000000000000000000000000000000000000000000000000000000000000000",
      "timestamp" => "0x610c1336",
      "totalDifficulty" => "0x8e1bc9bf04000",
      "transactions" => [],
      "transactionsRoot" => "0x0000000000000000000000000000000000000000000000000000000000000000",
      "uncles" => []
    }
  }
  """
  def request(block_hash) do
    GodwokenRPC.request(%{
      id: "0",
      method: "eth_getBlockByHash",
      params: [block_hash, false]
    })
  end
end
